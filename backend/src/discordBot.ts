import {Client, EmbedBuilder, GatewayIntentBits, TextChannel, ActivityType} from 'discord.js';
import 'dotenv/config';
import {OrderType, OrderStatus, PrismaClient} from "@prisma/client";

const prisma = new PrismaClient();


const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages
    ],
});

const orderTypeToChannelMap: Record<OrderType, string> = {
    KILL_TARGET: '1355186283005345922',        // —É–±–∏–π—Å—Ç–≤–∞
    LOGISTICS: '1355186314005315817',          // –ª–æ–≥–∏—Å—Ç–∏–∫–∞
    SCAN_WORMHOLE: '1355186341817618664',      // –≤—Ö —Å–∫–∞—É—Ç–∏–Ω–≥
    ROUTE_PLANNING: '1355186369831637202',     // —Ä–æ—É—Ç–∏–Ω–≥ –æ—Ä–¥–µ—Ä—Å
    OTHER: '1355186397731885146',              // –∫–∞—Å—Ç–æ–º

    SCOUT_SYSTEM: '1355186341817618664',
    ESCORT: '1355186397731885146',
    STRUCTURE_WORK: '1355186397731885146',
    CHARACTER_INFO: '1355186341817618664',
    COUNTER_INTEL: '1355186341817618664',
    EVENT_FARMING: '1355186397731885146',
    PVP_ASSIST: '1355186283005345922',
};


client.on('ready', () => {
    console.log(`ü§ñ Discord bot logged in as ${client.user?.tag}`);
    updateBotStatus(); // —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setInterval(updateBotStatus, 30 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
});

const updateBotStatus = async () => {
    try {
        const [activeCount, takenCount] = await Promise.all([
            prisma.order.count({ where: { status: OrderStatus.ACTIVE } }),
            prisma.order.count({ where: { status: OrderStatus.TAKEN } }),
        ]);

        const variants = [
            {
                text: ` ${activeCount} active missions üëÄ`,
                type: ActivityType.Watching,
            },
            {
                text: ` ${takenCount} taken contracts üì¶`,
                type: ActivityType.Watching,
            },
        ];

        const chosen = variants[Math.floor(Math.random() * variants.length)];

        client.user?.setPresence({
            activities: [{
                name: chosen.text,
                type: chosen.type,
            }],
            status: 'online',
        });

        console.log(`‚úÖ Updated bot status: ${chosen.text}`);
    } catch (err) {
        console.error('‚ùå Failed to update bot status:', err);
    }
};

// üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    try {
        if (message.content === '!ping') {
            await message.reply('pong!');
        }

        const commandChannelId = '1355186482050105506';
        if (message.channel.id !== commandChannelId) return;

        // !say <channelId> <message>
        if (message.content.startsWith('!say')) {
            const args = message.content.trim().split(' ');
            if (args.length < 3) {
                return message.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `!say <channelId> <—Ç–µ–∫—Å—Ç>`');
            }

            const targetChannelId = args[1];
            const text = args.slice(2).join(' ');

            const targetChannel = await client.channels.fetch(targetChannelId);
            if (!targetChannel?.isTextBased?.()) {
                return message.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π.');
            }

            await (targetChannel as any).send(text);
            await message.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ messageCreate:', err);
        try {
            await message.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
        } catch (_) {
        }
    }
});


// ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
export const startDiscordBot = async () => {
    const token = process.env.DISCORD_TOKEN;
    if (!token) {
        console.error('‚ùå DISCORD_TOKEN not found in .env');
        return;
    }

    try {
        await client.login(token);
        console.log('üîë Logged in with token:', token.slice(0, 5) + '...');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ Discord-–±–æ—Ç–∞:', err);
    }
};

export const setNickname = async (discordId: string, nickname: string) => {
    const guildId = process.env.DISCORD_GUILD_ID;
    if (!guildId) {
        console.error('‚ùå DISCORD_GUILD_ID not –Ω–∞–π–¥–µ–Ω –≤ .env');
        return;
    }

    try {
        const guild = await client.guilds.fetch(guildId);
        const member = await guild.members.fetch(discordId);
        if (!member) throw new Error('Member not found');

        await member.setNickname(nickname);
        console.log(`Nickname for ${discordId} set to ${nickname}`);
    } catch (err) {
        console.error('Error setting nickname:', err);
        throw err;
    }
};

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–∏–ª—å–¥–∏—é —Å —Ä–æ–ª—å—é
export const addUserToGuildWithRole = async (userId: string, accessToken: string) => {
    const guildId = process.env.DISCORD_GUILD_ID;
    const roleId = '1355171909649698906';

    if (!guildId) {
        console.error('‚ùå DISCORD_GUILD_ID not –Ω–∞–π–¥–µ–Ω –≤ .env');
        return;
    }

    try {
        const guild = await client.guilds.fetch(guildId);
        await guild.members.add(userId, { accessToken });

        const member = await guild.members.fetch(userId);
        await member.roles.add(roleId);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ${member.user.tag} –≤ –≥–∏–ª—å–¥–∏—é —Å —Ä–æ–ª—å—é`);
    } catch (error) {
        console.error('‚ùå Failed to add user to guild or assign role:', error);
    }
};

// üí¨ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const sendDM = async (userId: string, message: string) => {
    try {
        const user = await client.users.fetch(userId);
        if (!user) throw new Error('User not found');

        await user.send({ content: message });
        console.log(`‚úÖ DM sent to ${user.tag}`);
    } catch (error) {
        console.error(`‚ùå Failed to send DM to ${userId}:`, error);
    }
};

export const announceNewOrder = async (
    order: {
        id: string;
        type: OrderType;
        title: string;
        price: number;
        deadline?: string; // üëà ISO —Å—Ç—Ä–æ–∫–∞, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    }
) => {
    const channelId = orderTypeToChannelMap[order.type];
    if (!channelId) {
        console.warn(`‚ùó No channel configured for order type: ${order.type}`);
        return;
    }

    const categoryLabel = order.type
        .toLowerCase()
        .split('_')
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');

    try {
        const channel = await client.channels.fetch(channelId);
        if (!channel?.isTextBased?.()) {
            console.warn(`‚ùå Channel ${channelId} is not text-based`);
            return;
        }

        const orderLink = `https://localhost:3000/order?orderId=${order.id}`; // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω

        const fields = [
            { name: 'üóÇ Category', value: categoryLabel, inline: true },
            { name: 'üí∞ Reward', value: `${order.price.toLocaleString()} ISK`, inline: true },
            { name: 'üìù Title', value: order.title },
            { name: 'üîó Link', value: `[View Order](${orderLink})` },
        ];

        if (order.deadline) {
            const deadlineDate = new Date(order.deadline);
            const unixTimestamp = Math.floor(deadlineDate.getTime() / 1000);
            fields.push({
                name: '‚è≥ Deadline',
                value: `<t:${unixTimestamp}:R>`, // ‚è± in 2 hours, in 3 days, etc
                inline: true,
            });
        }

        const embed = new EmbedBuilder()
            .setTitle('üì¶ New Order Received')
            .addFields(fields)
            .setColor(0x0099ff)
            .setTimestamp();

        await (channel as TextChannel).send({ embeds: [embed] });
        console.log(`‚úÖ Posted new ${order.type} order to channel ${channelId}`);
    } catch (err) {
        console.error('‚ùå Failed to post new order:', err);
    }
};

export const sendToLogChannel = async (content: string) => {
    try {
        const channel = await client.channels.fetch('1356463829755756595');

        if (channel && channel.isTextBased?.()) {
            await (channel as TextChannel).send(content);
        } else {
            console.warn('‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π');
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Discord:', err);
    }
};